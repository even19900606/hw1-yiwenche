

/* First created by JCasGen Sun Oct 14 20:33:41 EDT 2012 */
package model;

import org.apache.uima.jcas.JCas; 
import org.apache.uima.jcas.JCasRegistry;
import org.apache.uima.jcas.cas.TOP_Type;

import org.apache.uima.jcas.tcas.Annotation;


/** 
 * Updated by JCasGen Sun Oct 14 20:33:41 EDT 2012
 * XML source: /Users/jacky/Documents/eclipse 2/hw1-yiwenche/src/main/resources/descriptors/GeneNameNERTypeSystem.xml
 * @generated */
public class GeneName extends Annotation {
  /** @generated
   * @ordered 
   */
  @SuppressWarnings ("hiding")
  public final static int typeIndexID = JCasRegistry.register(GeneName.class);
  /** @generated
   * @ordered 
   */
  @SuppressWarnings ("hiding")
  public final static int type = typeIndexID;
  /** @generated  */
  @Override
  public              int getTypeIndexID() {return typeIndexID;}
 
  /** Never called.  Disable default constructor
   * @generated */
  protected GeneName() {/* intentionally empty block */}
    
  /** Internal - constructor used by generator 
   * @generated */
  public GeneName(int addr, TOP_Type type) {
    super(addr, type);
    readObject();
  }
  
  /** @generated */
  public GeneName(JCas jcas) {
    super(jcas);
    readObject();   
  } 

  /** @generated */  
  public GeneName(JCas jcas, int begin, int end) {
    super(jcas);
    setBegin(begin);
    setEnd(end);
    readObject();
  }   

  /** <!-- begin-user-doc -->
    * Write your own initialization here
    * <!-- end-user-doc -->
  @generated modifiable */
  private void readObject() {/*default - does nothing empty block */}
     
 
    
  //*--------------*
  //* Feature: ID

  /** getter for ID - gets The Sentence ID that contain this gene name
   * @generated */
  public String getID() {
    if (GeneName_Type.featOkTst && ((GeneName_Type)jcasType).casFeat_ID == null)
      jcasType.jcas.throwFeatMissing("ID", "model.GeneName");
    return jcasType.ll_cas.ll_getStringValue(addr, ((GeneName_Type)jcasType).casFeatCode_ID);}
    
  /** setter for ID - sets The Sentence ID that contain this gene name 
   * @generated */
  public void setID(String v) {
    if (GeneName_Type.featOkTst && ((GeneName_Type)jcasType).casFeat_ID == null)
      jcasType.jcas.throwFeatMissing("ID", "model.GeneName");
    jcasType.ll_cas.ll_setStringValue(addr, ((GeneName_Type)jcasType).casFeatCode_ID, v);}    
   
    
  //*--------------*
  //* Feature: Name

  /** getter for Name - gets Gene's name
   * @generated */
  public String getName() {
    if (GeneName_Type.featOkTst && ((GeneName_Type)jcasType).casFeat_Name == null)
      jcasType.jcas.throwFeatMissing("Name", "model.GeneName");
    return jcasType.ll_cas.ll_getStringValue(addr, ((GeneName_Type)jcasType).casFeatCode_Name);}
    
  /** setter for Name - sets Gene's name 
   * @generated */
  public void setName(String v) {
    if (GeneName_Type.featOkTst && ((GeneName_Type)jcasType).casFeat_Name == null)
      jcasType.jcas.throwFeatMissing("Name", "model.GeneName");
    jcasType.ll_cas.ll_setStringValue(addr, ((GeneName_Type)jcasType).casFeatCode_Name, v);}    
   
    
  //*--------------*
  //* Feature: Accumulate

  /** getter for Accumulate - gets Accumulate offset generated by previous sentences
   * @generated */
  public int getAccumulate() {
    if (GeneName_Type.featOkTst && ((GeneName_Type)jcasType).casFeat_Accumulate == null)
      jcasType.jcas.throwFeatMissing("Accumulate", "model.GeneName");
    return jcasType.ll_cas.ll_getIntValue(addr, ((GeneName_Type)jcasType).casFeatCode_Accumulate);}
    
  /** setter for Accumulate - sets Accumulate offset generated by previous sentences 
   * @generated */
  public void setAccumulate(int v) {
    if (GeneName_Type.featOkTst && ((GeneName_Type)jcasType).casFeat_Accumulate == null)
      jcasType.jcas.throwFeatMissing("Accumulate", "model.GeneName");
    jcasType.ll_cas.ll_setIntValue(addr, ((GeneName_Type)jcasType).casFeatCode_Accumulate, v);}    
  }

    